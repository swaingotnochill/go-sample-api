// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/swaingotnochill/tempmee/domain"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: c, order
func (_m *OrderUseCase) CreateOrder(c context.Context, order *domain.Order) error {
	ret := _m.Called(c, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Order) error); ok {
		r0 = rf(c, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrders provides a mock function with given fields: c
func (_m *OrderUseCase) GetAllOrders(c context.Context) ([]*domain.Order, error) {
	ret := _m.Called(c)

	var r0 []*domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Order, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Order); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBookById provides a mock function with given fields: c, id
func (_m *OrderUseCase) GetBookById(c context.Context, id string) (*domain.Book, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Book, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Book); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Book)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByID provides a mock function with given fields: c, id
func (_m *OrderUseCase) GetOrderByID(c context.Context, id string) (*domain.Order, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrdersByCustomerID provides a mock function with given fields: c, id
func (_m *OrderUseCase) GetOrdersByCustomerID(c context.Context, id string) ([]*domain.Order, error) {
	ret := _m.Called(c, id)

	var r0 []*domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Order, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Order); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
